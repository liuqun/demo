cmake_minimum_required(VERSION 3.1)
project(DEMO LANGUAGES C)
include(${CMAKE_ROOT}/Modules/GNUInstallDirs.cmake)

find_package(PkgConfig REQUIRED)

pkg_search_module(TSS2_SYSTEM_API REQUIRED sapi tss2-sys)
pkg_check_modules(TSS2_TCTI_SOCKET tcti-socket)
pkg_check_modules(TSS2_TCTI_MSSIM tss2-tcti-mssim)
pkg_search_module(TSS2_TCTI_DEVICE tcti-device tss2-tcti-device)
pkg_search_module(TSS2_TCTI_TABRMD tcti-tabrmd tss2-tcti-tabrmd)

if(NOT (TSS2_TCTI_SOCKET_FOUND OR TSS2_TCTI_MSSIM_FOUND OR TSS2_TCTI_DEVICE_FOUND OR TSS2_TCTI_TABRMD_FOUND))
  message(FATAL_ERROR "At least one connection type must be enabled")
endif()
if(TSS2_TCTI_MSSIM_FOUND AND TSS2_TCTI_SOCKET_FOUND)
  message(FATAL_ERROR "libtss2-tcti-mssim.so and libtcti-socket.so should NOT exist at the same time")
endif()

aux_source_directory(./src SRC_LIST)

#add_library(demo SHARED ${SRC_LIST})
add_executable(demo ${SRC_LIST})
set_property(TARGET demo PROPERTY C_STANDARD 11)
target_include_directories(demo PRIVATE ${TSS2_SYSTEM_API_INCLUDE_DIRS} ${TSS2_TCTI_SOCKET_INCLUDE_DIRS} ${TSS2_TCTI_MSSIM_INCLUDE_DIRS} ${TSS2_TCTI_DEVICE_INCLUDE_DIRS} ${TSS2_TCTI_TABRMD_INCLUDE_DIRS})
if(TSS2_TCTI_SOCKET_FOUND)
  target_compile_definitions(demo PUBLIC HAVE_TSS2_TCTI_SOCKET)
endif()
if(TSS2_TCTI_MSSIM_FOUND)
  target_compile_definitions(demo PUBLIC HAVE_TSS2_TCTI_MSSIM)
endif()
if(TSS2_TCTI_DEVICE_FOUND)
  target_compile_definitions(demo PUBLIC HAVE_TSS2_TCTI_DEVICE)
endif()
if(TSS2_TCTI_TABRMD_FOUND)
  target_compile_definitions(demo PUBLIC HAVE_TSS2_TCTI_TABRMD)
endif()

if (TSS2_SYSTEM_API_VERSION VERSION_LESS "2.0")
  target_compile_definitions(demo PUBLIC ENABLE_BACKWARD_COMPATIBLE_LAYER_FOR_LEGACY_TSS_HEADERS)
  target_link_libraries(demo ${TSS2_SYSTEM_API_LIBRARIES} ${TSS2_TCTI_SOCKET_LIBRARIES} ${TSS2_TCTI_DEVICE_LIBRARIES} ${TSS2_TCTI_TABRMD_LIBRARIES})
else()
  target_link_libraries(demo ${TSS2_SYSTEM_API_LIBRARIES} -ldl)
endif()

install(TARGETS demo DESTINATION bin)
